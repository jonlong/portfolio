{"componentChunkName":"component---src-layouts-post-js","path":"/work/design-systems/","result":{"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Design Systems\",\n  \"link\": null,\n  \"order\": 2,\n  \"background\": \"purple\",\n  \"overhang\": false,\n  \"draft\": false\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(PostColumn, {\n    theme: _frontmatter.background,\n    mdxType: \"PostColumn\"\n  }, mdx(Markdown, {\n    mdxType: \"Markdown\"\n  }, mdx(\"h2\", null, \"Standalone Library\")), mdx(Stack, {\n    theme: _frontmatter.background,\n    mdxType: \"Stack\"\n  }, mdx(List, {\n    mdxType: \"List\"\n  }, mdx(ListItem, {\n    mdxType: \"ListItem\"\n  }, mdx(\"p\", null, mdx(Link, {\n    to: \"https://fractal.build\",\n    mdxType: \"Link\"\n  }, \"Fractal\"))), mdx(ListItem, {\n    mdxType: \"ListItem\"\n  }, mdx(\"p\", null, \"Sass, ES6 JavaScript, compiled with Babel and Webpack\")), mdx(ListItem, {\n    mdxType: \"ListItem\"\n  }, mdx(\"p\", null, \"Nunjucks templating library\")))), mdx(Browser, {\n    mdxType: \"Browser\"\n  }, mdx(Video, {\n    autoPlay: true,\n    loop: true,\n    muted: true,\n    mdxType: \"Video\"\n  }, mdx(\"source\", {\n    src: videoDSMP4Integrity,\n    type: \"video/mp4\"\n  }))), mdx(Markdown, {\n    mdxType: \"Markdown\"\n  }, mdx(\"p\", null, \"I've been excited to see the rise of component libraries and styleguides in web app development over the last few years, and have especially started to see their dividends in recent projects requiring design systems as deliverables.\"), mdx(\"p\", null, \"I built the components above with the \", mdx(Link, {\n    to: \"https://fractal.build\",\n    mdxType: \"Link\"\n  }, \"Fractal\"), \" library, which created an incredibly smooth and consistent QA experience for both myself and the design team. I was able to develop and test each of the components in isolation first, and then pass the interactive versions to the designers for a more focused review. Building this way also encouraged a taking more modular approach from the start, and each component was created using Nunjucks template partials, BEM naming conventions, and ES6 modules.\"), mdx(\"p\", null, \"I've found this approach so productive and valuable that I've adopted it as a standard step in my own site design and development.\")), mdx(Markdown, {\n    mdxType: \"Markdown\"\n  }, mdx(\"h2\", null, \"Styleguides\")), mdx(Stack, {\n    theme: _frontmatter.background,\n    mdxType: \"Stack\"\n  }, mdx(List, {\n    mdxType: \"List\"\n  }, mdx(ListItem, {\n    mdxType: \"ListItem\"\n  }, mdx(\"p\", null, mdx(Link, {\n    to: \"https://apostrophecms.org\",\n    mdxType: \"Link\"\n  }, \"Apostrophe CMS\"), \" (Node.js)\")), mdx(ListItem, {\n    mdxType: \"ListItem\"\n  }, mdx(\"p\", null, \"LESS, jQuery\")), mdx(ListItem, {\n    mdxType: \"ListItem\"\n  }, mdx(\"p\", null, \"Nunjucks templating library\")))), mdx(Markdown, {\n    mdxType: \"Markdown\"\n  }, mdx(\"p\", null, \"For sites with less complex components and more static design elements, living styleguides are a nice middle ground. The examples below are taken from two recent projects, and were the first things I built for each.\"), mdx(\"p\", null, \"Once these libraries were complete, full templates were assembled Bootstrap-style, using the markup patterns in the styleguide.\")), mdx(Browser, {\n    description: \"A responsive, living styleguide created for Roxborough, Philadelphia\",\n    mdxType: \"Browser\"\n  }, mdx(Still, {\n    src: imageDesktopDSRoxborough,\n    alt: \"Screenshot: A living styleguide for Roxborough, Philadelphia\",\n    mdxType: \"Still\"\n  })), mdx(Browser, {\n    description: \"A responsive, living styleguide created for The Green Program\",\n    mdxType: \"Browser\"\n  }, mdx(Still, {\n    src: imageDesktopDSGreenProgram,\n    alt: \"Screenshot: A living styleguide for The Green Program\",\n    mdxType: \"Still\"\n  }))));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"slug":"/work/design-systems/"},"frontmatter":{"title":"Design Systems","overhang":false,"background":"purple"}}},"pageContext":{"slug":"/work/design-systems/","prev":{"fields":{"slug":"/work/criterion/"},"frontmatter":{"draft":false,"title":"The Criterion Collection","overhang":true,"background":"blush"}},"next":{"fields":{"slug":"/work/remedy-plan/"},"frontmatter":{"draft":false,"title":"Remedy Plan Therapeutics","overhang":true,"background":"darkblue"}}}},"staticQueryHashes":[]}